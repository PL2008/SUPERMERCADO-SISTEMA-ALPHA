#!/usr/bin/env python3
"""
Script de inicializa√ß√£o r√°pida do Sistema de Supermercado
Este script facilita a configura√ß√£o inicial do sistema
"""

import os
import sys
import subprocess
import time

def print_banner():
    """Exibe o banner do sistema"""
    print("=" * 70)
    print("üõí SISTEMA DE SUPERMERCADO - INICIALIZA√á√ÉO R√ÅPIDA")
    print("=" * 70)
    print()

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio!")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    return True

def install_dependencies():
    """Instala as depend√™ncias do projeto"""
    print("üì¶ Instalando depend√™ncias...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                      check=True, capture_output=True)
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        print("üí° Tente executar manualmente: pip install -r requirements.txt")
        return False

def check_postgresql():
    """Verifica se o PostgreSQL est√° dispon√≠vel"""
    print("üêò Verificando PostgreSQL...")
    try:
        import psycopg2
        print("‚úÖ Driver PostgreSQL (psycopg2) instalado!")
        return True
    except ImportError:
        print("‚ùå Driver PostgreSQL n√£o encontrado!")
        print("üí° Instale com: pip install psycopg2-binary")
        return False

def create_database():
    """Cria o banco de dados se n√£o existir"""
    print("üóÑÔ∏è  Configurando banco de dados...")
    
    # Importar ap√≥s instalar depend√™ncias
    try:
        from app import app, db
        
        with app.app_context():
            db.create_all()
            print("‚úÖ Tabelas do banco de dados criadas!")
            return True
    except Exception as e:
        print(f"‚ùå Erro ao criar banco de dados: {e}")
        print("üí° Verifique as configura√ß√µes no arquivo .env")
        return False

def populate_sample_data():
    """Pergunta se deseja popular com dados de exemplo"""
    print("\nüì¶ Dados de exemplo")
    response = input("Deseja adicionar produtos de exemplo ao banco? (s/N): ").lower()
    
    if response in ['s', 'sim', 'y', 'yes']:
        try:
            subprocess.run([sys.executable, "populate_db.py", "create"], check=True)
            return True
        except subprocess.CalledProcessError:
            print("‚ùå Erro ao criar produtos de exemplo")
            return False
    else:
        print("‚è≠Ô∏è  Pulando cria√ß√£o de dados de exemplo")
        return True

def show_instructions():
    """Mostra as instru√ß√µes finais"""
    print("\n" + "=" * 70)
    print("üéâ SISTEMA CONFIGURADO COM SUCESSO!")
    print("=" * 70)
    print()
    print("üöÄ Para iniciar o sistema:")
    print("   python app.py")
    print()
    print("üåê Acesse no navegador:")
    print("   http://localhost:5000")
    print()
    print("üë§ Usu√°rios padr√£o:")
    print("   Admin:    login=admin,    senha=admin123")
    print("   Operador: login=operador, senha=op123")
    print()
    print("üìö Funcionalidades:")
    print("   ‚Ä¢ Login com n√≠veis de acesso")
    print("   ‚Ä¢ Gerenciamento de produtos e usu√°rios")
    print("   ‚Ä¢ PDV (Ponto de Venda) completo")
    print("   ‚Ä¢ Gera√ß√£o de notas fiscais em PDF")
    print("   ‚Ä¢ Interface moderna e responsiva")
    print()
    print("üîß Comandos √∫teis:")
    print("   python populate_db.py create  # Criar produtos de exemplo")
    print("   python populate_db.py stats   # Ver estat√≠sticas")
    print("   python populate_db.py clear   # Limpar produtos")
    print()
    print("üìñ Para mais informa√ß√µes, consulte o README.md")
    print("=" * 70)

def main():
    """Fun√ß√£o principal"""
    print_banner()
    
    # Verificar Python
    if not check_python_version():
        sys.exit(1)
    
    # Instalar depend√™ncias
    if not install_dependencies():
        print("\n‚ö†Ô∏è  Continuando mesmo com erro nas depend√™ncias...")
    
    # Verificar PostgreSQL
    if not check_postgresql():
        print("\n‚ö†Ô∏è  PostgreSQL pode n√£o estar configurado corretamente")
        print("üí° Configure o banco conforme instru√ß√µes no README.md")
    
    # Criar banco de dados
    if not create_database():
        print("\n‚ùå Falha na configura√ß√£o do banco de dados")
        print("üí° Verifique:")
        print("   1. PostgreSQL est√° rodando")
        print("   2. Credenciais no arquivo .env est√£o corretas")
        print("   3. Banco de dados foi criado")
        sys.exit(1)
    
    # Popular dados de exemplo
    populate_sample_data()
    
    # Mostrar instru√ß√µes finais
    show_instructions()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Configura√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        print("üí° Execute os comandos manualmente conforme README.md")
        sys.exit(1)